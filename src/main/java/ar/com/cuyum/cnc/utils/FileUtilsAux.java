package ar.com.cuyum.cnc.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;
import java.io.StringWriter;

import javax.annotation.Resource;
import javax.ejb.Stateless;
import javax.enterprise.context.ConversationScoped;
import javax.enterprise.inject.Any;
import javax.enterprise.inject.Default;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.servlet.ServletContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import ar.com.cuyum.cnc.domain.Formulario;
import ar.com.cuyum.cnc.domain.Xsl;

@Stateless
public class FileUtilsAux implements Serializable {

	private static final long serialVersionUID = 1L;

	private static String XSL_FROM = "/WEB-INF/xsl/";
	private static String XML_FROM = "/WEB-INF/formularios/";

	public static Logger log = Logger.getLogger(FileUtilsAux.class);

	public String format(InputStream isXml) {
		StringWriter stringWriter = new StringWriter();
		StreamResult result = new StreamResult(stringWriter);
		try {
			final Document document = parseXmlFile(isXml);
			DOMSource source = new DOMSource(document);
			// Use a Transformer for output
			TransformerFactory tFactory = TransformerFactory.newInstance();
			Transformer transformer = tFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.METHOD, "xml");
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");
			transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,
					"yes");
			transformer.transform(source, result);

		} catch (TransformerConfigurationException tce) {
			// Error generated by the parser
			log.error("* Transformer Factory error");
			log.error("  " + tce.getMessage());

			// Use the contained exception, if any
			Throwable x = tce;
			if (tce.getException() != null)
				x = tce.getException();
			x.printStackTrace();
		} catch (TransformerException te) {
			// Error generated by the parser
			log.error("* Transformation error");
			log.error("  " + te.getMessage());

			// Use the contained exception, if any
			Throwable x = te;
			if (te.getException() != null)
				x = te.getException();
			x.printStackTrace();

		}
		return stringWriter.toString();
	}

	public static Document parseXmlFile(InputStream is) {
		try {
			DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
			DocumentBuilder db = dbf.newDocumentBuilder();
			Document doc = db.parse(is);
			doc.getDocumentElement().normalize();
			return doc;
		} catch (ParserConfigurationException e) {
			throw new RuntimeException(e);
		} catch (SAXException e) {
			throw new RuntimeException(e);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
	}
	
	//@Resource ServletContext servletContext;

	public InputStream getXmlInputStream(Formulario formulario, ServletContext servletContext) {
		InputStream xmlStream = null;
		String from;
		try {
			from = formulario.getUrl();
			if (from != null && !from.isEmpty()) {
				// Leer archivo desde ubicacion
				if (!from.endsWith(System.getProperty("file.separator"))) {
					// Agrego separador de fin
					from = from + System.getProperty("file.separator");
				}
				File archivo = new File(from
						+ System.getProperty("file.separator")
						+ formulario.getArchivo());
				if (archivo.exists()) {
					xmlStream = new FileInputStream(archivo);
					// xmlStream.close();
				}

			} else {
				// Probar del context
				

				xmlStream = servletContext.getResourceAsStream(XML_FROM
						+ formulario.getArchivo());

				// xmlStream =
				// this.getClass().getClassLoader().getResourceAsStream("WEB-INF/formularios/"
				// + formulario.getArchivo());
				// xmlStream =
				// Thread.currentThread().getContextClassLoader().getResourceAsStream(XML_FROM
				// + formulario.getArchivo());
			}
		} catch (FileNotFoundException e) {
			log.error(e.getMessage());
		}
		return xmlStream;
	}
	
	
	public InputStream loadXsl(Xsl xslTransform, ServletContext servletContext) {
		InputStream xslIS = null;
		String from;
		try {
			from = xslTransform.getUrl();
			if (from != null && !from.isEmpty()) {
				// Leer archivo desde ubicacion
				if (!from.endsWith(System.getProperty("file.separator"))) {
					// Agrego separador de fin
					from = from + System.getProperty("file.separator");
				}
				File archivo = new File(from
						+ System.getProperty("file.separator")
						+ xslTransform.getArchivo());
				xslIS = new FileInputStream(archivo);
			} else {

				// xslIS =
				// this.getClass().getClassLoader().getResourceAsStream("WEB-INF/xsl/"
				// + xslTransform.getArchivo());
				xslIS = servletContext.getResourceAsStream(
								XSL_FROM + xslTransform.getArchivo());
			}
		} catch (FileNotFoundException e) {
			log.error(e.getMessage());
		}
		return xslIS;
	}

	public static String getXMLFROM() {
		return XML_FROM;
	}
}
